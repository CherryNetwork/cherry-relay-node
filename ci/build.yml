#### Build stage
.check-dependent-project:          &check-dependent-project
  stage:                           build
  <<:                              *docker-env
  <<:                              *test-pr-refs
  script:
    - git clone
        --depth=1
        "--branch=$PIPELINE_SCRIPTS_TAG"
        https://github.com/paritytech/pipeline-scripts
    - ./pipeline-scripts/check_dependent_project.sh
        paritytech
        polkadot
        --polkadot
        "$DEPENDENT_REPO"
        "$GITHUB_PR_TOKEN"
        $CARGO_UPDATE_CRATES

check-dependent-cumulus:
  <<: *check-dependent-project
  variables:
    DEPENDENT_REPO: cumulus
    CARGO_UPDATE_CRATES: "sp-io polkadot-runtime-common"

check-transaction-versions:
  stage:                           build
  <<:                              *test-refs
  <<:                              *docker-env
  image:                           node:15
  needs:
    - job:                         test-build-linux-stable
      artifacts:                   true
  before_script:
    - apt-get -y update; apt-get -y install jq lsof
    - npm install --ignore-scripts -g @polkadot/metadata-cmp
    # Set git config
    - git config remote.origin.url "https://github.com/paritytech/polkadot.git"
    - git fetch origin release
  script:
    - scripts/gitlab/check_extrinsics_ordering.sh

generate-impl-guide:
  stage:                           build
  <<:                              *test-refs
  <<:                              *docker-env
  image:
    name: michaelfbryan/mdbook-docker-image:v0.4.4
    entrypoint: [""]
  script:
    - mdbook build roadmap/implementers-guide

build-rustdoc:
  stage:                           build
  <<:                              *docker-env
  <<:                              *test-refs
  variables:
    SKIP_WASM_BUILD:               1
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}-doc"
    when:                          on_success
    expire_in:                     7 days
    paths:
    - ./crate-docs/
  script:
    # FIXME: it fails with `RUSTDOCFLAGS="-Dwarnings"` and `--all-features`
    - time cargo doc --workspace --verbose
    - rm -f ./target/doc/.lock
    - mv ./target/doc ./crate-docs
    # FIXME: remove me after CI image gets nonroot
    - chown -R nonroot:nonroot ./crate-docs
    - echo "<meta http-equiv=refresh content=0;url=polkadot_service/index.html>" > ./crate-docs/index.html
    - sccache -s

.build-push-image:                 &build-push-image
  <<:                              *kubernetes-env
  image:                           quay.io/buildah/stable
  variables:                       &image-variables
    GIT_STRATEGY:                  none
    DOCKER_USER:                   ${PARITYPR_USER}
    DOCKER_PASS:                   ${PARITYPR_PASS}
  before_script:                   &check-versions
    - test -s ./artifacts/VERSION || exit 1
    - test -s ./artifacts/EXTRATAG || exit 1
    - VERSION="$(cat ./artifacts/VERSION)"
    - EXTRATAG="$(cat ./artifacts/EXTRATAG)"
    - echo "Polkadot version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
  script:
    - test "$DOCKER_USER" -a "$DOCKER_PASS" ||
        ( echo "no docker credentials provided"; exit 1 )
    - cd ./artifacts
    - buildah bud
        --format=docker
        --build-arg VCS_REF="${CI_COMMIT_SHA}"
        --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
        --build-arg IMAGE_NAME="${IMAGE_NAME}"
        --tag "$IMAGE_NAME:$VERSION"
        --tag "$IMAGE_NAME:$EXTRATAG"
        --file ${DOCKERFILE} .
    # The job will success only on the protected branch
    - echo "$DOCKER_PASS" |
        buildah login --username "$DOCKER_USER" --password-stdin docker.io
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:$EXTRATAG"
  after_script:
    - buildah logout --all

publish-polkadot-image:
  stage:                           build
  <<:                              *build-push-image
  variables:
    <<:                            *image-variables
    # scripts/dockerfiles/polkadot_injected_debug.Dockerfile
    DOCKERFILE:                    dockerfiles/polkadot_injected_debug.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/synth-wave
  rules:
    # Don't run on releases - this is handled by the Github Action here:
    # .github/workflows/publish-docker-release.yml
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # i.e. v1.0, v2.1rc1
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs
  needs:
    - job:                         test-build-linux-stable
      artifacts:                   true
  after_script:
    # pass artifacts to the zombienet-tests job
    # https://docs.gitlab.com/ee/ci/multi_project_pipelines.html#with-variable-inheritance
    - echo "PARACHAINS_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/parachains.env
    - echo "PARACHAINS_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/parachains.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/parachains.env

publish-adder-collator-image:
  # service image for Simnet
  stage:                           build
  <<:                              *build-push-image
  <<:                              *zombienet-refs
  variables:
    <<:                            *image-variables
    # scripts/dockerfiles/collator_injected.Dockerfile
    DOCKERFILE:                    dockerfiles/collator_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/colander
  needs:
    - job:                         build-adder-collator
      artifacts:                   true
  after_script:
    - buildah logout --all
    # pass artifacts to the zombienet-tests job
    - echo "COLLATOR_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/collator.env
    - echo "COLLATOR_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/collator.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/collator.env

publish-malus-image:
  # service image for Simnet
  stage:                           build
  <<:                              *build-push-image
  <<:                              *zombienet-refs
  variables:
    <<:                            *image-variables
    # scripts/dockerfiles/malus_injected.Dockerfile
    DOCKERFILE:                    dockerfiles/malus_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/malus
  needs:
    - job:                         build-malus
      artifacts:                   true
  after_script:
    - buildah logout "$IMAGE_NAME"
    # pass artifacts to the zombienet-tests job
    - echo "MALUS_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/malus.env
    - echo "MALUS_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/malus.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/malus.env

update_polkadot_weights:           &update-weights
  stage:                           build
  when:                            manual
  variables:
    RUNTIME:                       polkadot
  artifacts:
    paths:
      - ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  script:
    - ./scripts/run_benches_for_runtime.sh $RUNTIME
    - git diff -P > ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  # uses the "shell" executors
  tags:
    - weights

update_kusama_weights:
  <<:                              *update-weights
  variables:
    RUNTIME:                       kusama

update_westend_weights:
  <<:                              *update-weights
  variables:
    RUNTIME:                       westend


build-adder-collator:
  stage:                           build
  <<:                              *collect-artifacts
  <<:                              *docker-env
  <<:                              *compiler-info
  <<:                              *test-refs
  script:
    - time cargo build --profile testnet --verbose -p test-parachain-adder-collator
    - sccache -s
    # pack artifacts
    - mkdir -p ./artifacts
    - mv ./target/testnet/adder-collator ./artifacts/.
    - echo -n "${CI_COMMIT_REF_NAME}" > ./artifacts/VERSION
    - echo -n "${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}" > ./artifacts/EXTRATAG
    - echo "adder-collator version = $(cat ./artifacts/VERSION) (EXTRATAG = $(cat ./artifacts/EXTRATAG))"
    - cp -r scripts/* ./artifacts

build-malus:
  stage:                           build
  <<:                              *collect-artifacts
  <<:                              *docker-env
  <<:                              *compiler-info
  <<:                              *test-refs
  script:
    - time cargo build --profile testnet --verbose -p polkadot-test-malus
    - sccache -s
    # pack artifacts
    - mkdir -p ./artifacts
    - mv ./target/testnet/malus ./artifacts/.
    - echo -n "${CI_COMMIT_REF_NAME}" > ./artifacts/VERSION
    - echo -n "${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}" > ./artifacts/EXTRATAG
    - echo "polkadot-test-malus = $(cat ./artifacts/VERSION) (EXTRATAG = $(cat ./artifacts/EXTRATAG))"
    - cp -r scripts/* ./artifacts

