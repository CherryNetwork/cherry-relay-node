initSidebarItems({"attr":[["contextbounds",""],["overlord",""],["subsystem",""]],"constant":[["KNOWN_LEAVES_CACHE_SIZE","Store 2 days worth of blocks, not accounting for forks, in the LRU cache. Assumes a 6-second block time."]],"enum":[["AllMessages","Generated message type wrapper over all possible messages used by any subsystem."],["ApprovalDistributionOutgoingMessages",""],["ApprovalVotingOutgoingMessages",""],["AvailabilityDistributionOutgoingMessages",""],["AvailabilityRecoveryOutgoingMessages",""],["AvailabilityStoreOutgoingMessages",""],["BitfieldDistributionOutgoingMessages",""],["BitfieldSigningOutgoingMessages",""],["CandidateBackingOutgoingMessages",""],["CandidateValidationOutgoingMessages",""],["ChainApiOutgoingMessages",""],["ChainSelectionOutgoingMessages",""],["CollationGenerationOutgoingMessages",""],["CollatorProtocolOutgoingMessages",""],["DisputeCoordinatorOutgoingMessages",""],["DisputeDistributionOutgoingMessages",""],["Event","An event from outside the overseer scope, such as the substrate framework or user interaction."],["ExternalRequest","Some request from outer world."],["FromOverseer","A message type that a subsystem receives from an overseer. It wraps signals from an overseer and messages that are circulating between subsystems."],["GossipSupportOutgoingMessages",""],["Init","Type for the initialized field of the overseer builder"],["LeafStatus","The status of an activated leaf."],["NetworkBridgeOutgoingMessages",""],["OverseerSignal","Signals sent by an overseer to a subsystem."],["ProvisionerOutgoingMessages",""],["PvfCheckerOutgoingMessages",""],["RuntimeApiOutgoingMessages",""],["StatementDistributionOutgoingMessages",""],["SubsystemError","An error type that describes faults that may happen"],["ToOverseer","A type of messages that are sent from a [`Subsystem`] to the declared overseer."]],"fn":[["forward_events","Glues together the [`Overseer`] and `BlockchainEvents` by forwarding import and finality notifications into the [`OverseerHandle`]."],["spawn","Spawn task of kind `self` using spawner `S`."],["spawn_metronome_metrics","Spawn the metrics metronome task."]],"mod":[["dummy","A dummy subsystem, mostly useful for placeholders and tests."],["metrics","Prometheus metrics related to the overseer and its channels."]],"struct":[["ActivatedLeaf","Activated leaf."],["ActiveLeavesUpdate","Changes in the set of active leaves: the parachain heads which we care to work on."],["BlockInfo","An event telling the `Overseer` on the particular block that has been imported or finalized."],["ChannelsOut","Collection of channels to the individual subsystems."],["Handle","A handle used to communicate with the `Overseer`."],["MessagePacket","A wrapping type for messages."],["Metronome","Create a stream of ticks with a defined cycle duration."],["Missing","Type marker for the uninitialized field of the overseer builder. `PhantomData` is used for type hinting when creating uninitialized builder, e.g. to avoid specifying the generics when instantiating the `FooBuilder` when calling `Foo::builder()`"],["OverseenSubsystem","A subsystem that the overseer oversees."],["Overseer","The overseer."],["OverseerBuilder","Builder pattern to create compile time safe construction path."],["OverseerConnector","External connector."],["OverseerSender","Connector to send messages towards all subsystems, while tracking the which signals where already received."],["OverseerSubsystemContext","A context type that is given to the `Subsystem` upon spawning. It can be used by `Subsystem` to communicate with other `Subsystem`s or to spawn itâ€™s `SubsystemJob`s."],["SignalsReceived","Watermark to track the received signals."],["SubsystemInstance","A running instance of some `Subsystem`."],["SubsystemMeterReadouts","Set of readouts of the `Meter`s of a subsystem."],["SubsystemMeters","Collection of meters related to a subsystem."]],"trait":[["ApprovalDistributionContextTrait","Accumulative trait for a particular subsystem wrapper."],["ApprovalDistributionSenderTrait","A abstracting trait for usage with subsystems."],["ApprovalVotingContextTrait","Accumulative trait for a particular subsystem wrapper."],["ApprovalVotingSenderTrait","A abstracting trait for usage with subsystems."],["AssociateOutgoing","Binds a generated type covering all declared outgoing messages, which implements `#generated_outgoing: From<M>` for all annotated types of a particular subsystem."],["AvailabilityDistributionContextTrait","Accumulative trait for a particular subsystem wrapper."],["AvailabilityDistributionSenderTrait","A abstracting trait for usage with subsystems."],["AvailabilityRecoveryContextTrait","Accumulative trait for a particular subsystem wrapper."],["AvailabilityRecoverySenderTrait","A abstracting trait for usage with subsystems."],["AvailabilityStoreContextTrait","Accumulative trait for a particular subsystem wrapper."],["AvailabilityStoreSenderTrait","A abstracting trait for usage with subsystems."],["BitfieldDistributionContextTrait","Accumulative trait for a particular subsystem wrapper."],["BitfieldDistributionSenderTrait","A abstracting trait for usage with subsystems."],["BitfieldSigningContextTrait","Accumulative trait for a particular subsystem wrapper."],["BitfieldSigningSenderTrait","A abstracting trait for usage with subsystems."],["CandidateBackingContextTrait","Accumulative trait for a particular subsystem wrapper."],["CandidateBackingSenderTrait","A abstracting trait for usage with subsystems."],["CandidateValidationContextTrait","Accumulative trait for a particular subsystem wrapper."],["CandidateValidationSenderTrait","A abstracting trait for usage with subsystems."],["ChainApiContextTrait","Accumulative trait for a particular subsystem wrapper."],["ChainApiSenderTrait","A abstracting trait for usage with subsystems."],["ChainSelectionContextTrait","Accumulative trait for a particular subsystem wrapper."],["ChainSelectionSenderTrait","A abstracting trait for usage with subsystems."],["CollationGenerationContextTrait","Accumulative trait for a particular subsystem wrapper."],["CollationGenerationSenderTrait","A abstracting trait for usage with subsystems."],["CollatorProtocolContextTrait","Accumulative trait for a particular subsystem wrapper."],["CollatorProtocolSenderTrait","A abstracting trait for usage with subsystems."],["DisputeCoordinatorContextTrait","Accumulative trait for a particular subsystem wrapper."],["DisputeCoordinatorSenderTrait","A abstracting trait for usage with subsystems."],["DisputeDistributionContextTrait","Accumulative trait for a particular subsystem wrapper."],["DisputeDistributionSenderTrait","A abstracting trait for usage with subsystems."],["GossipSupportContextTrait","Accumulative trait for a particular subsystem wrapper."],["GossipSupportSenderTrait","A abstracting trait for usage with subsystems."],["HeadSupportsParachains","Whether a header supports parachain consensus or not."],["MapSubsystem","A helper trait to map a subsystem to smth. else."],["MetricsTrait","Subsystem- or job-specific Prometheus metrics."],["NetworkBridgeContextTrait","Accumulative trait for a particular subsystem wrapper."],["NetworkBridgeSenderTrait","A abstracting trait for usage with subsystems."],["ProvisionerContextTrait","Accumulative trait for a particular subsystem wrapper."],["ProvisionerSenderTrait","A abstracting trait for usage with subsystems."],["PvfCheckerContextTrait","Accumulative trait for a particular subsystem wrapper."],["PvfCheckerSenderTrait","A abstracting trait for usage with subsystems."],["RuntimeApiContextTrait","Accumulative trait for a particular subsystem wrapper."],["RuntimeApiSenderTrait","A abstracting trait for usage with subsystems."],["SpawnNamed","Something that can spawn tasks (blocking and non-blocking) with an assigned name and optional group."],["StatementDistributionContextTrait","Accumulative trait for a particular subsystem wrapper."],["StatementDistributionSenderTrait","A abstracting trait for usage with subsystems."],["Subsystem","A trait that describes the `Subsystem`s that can run on the `Overseer`."],["SubsystemContext","A context type that is given to the [`Subsystem`] upon spawning. It can be used by [`Subsystem`] to communicate with other [`Subsystem`]s or spawn jobs."],["SubsystemSender","Sender end of a channel to interface with a subsystem."],["TaskKind","Task kind to launch."],["TimeoutExt","Extends `Future` to allow time-limited futures."]],"type":[["InitializedOverseerBuilder","Type used to represent a builder where all fields are initialized and the overseer could be constructed."],["OverseerHandle","Handle for an overseer."],["SubsystemIncomingMessages","Incoming messages from both the bounded and unbounded channel."],["SubsystemResult","Ease the use of subsystem errors."]]});